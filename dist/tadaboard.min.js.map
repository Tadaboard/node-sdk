{"version":3,"sources":["tadaboard.min.js","/source/tadaboard.js","/source/src/query.js","/source/src/request.js","/source/src/response.js","/source/src/tadaboard.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","TB","_","this","Query","options","arguments","undefined","request","query","merge","extractQuery","value","Request","body","_extractQuery","input","_convertInput","requestObject","JSON","parse","e","SyntaxError","response__widgetsToArray","widgets","result","keys","forEach","push","id","data","Response","requestBody","default","queryDefault","getQuery","timestamp","Date","now","item","stringify","toJSON","response","tadaboard"],"mappings":"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","file":"tadaboard.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash')) : typeof define === 'function' && define.amd ? define(['lodash'], factory) : global.TB = factory(global._);\n})(this, function (_) {\n  'use strict';\n\n  var Query = (function () {\n    function Query() {\n      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      _classCallCheck(this, Query);\n\n      this['default'] = options['default'] || {};\n      this.request = options.request || {};\n      this.query = _.merge({}, this['default'], this.request.extractQuery());\n    }\n\n    _createClass(Query, [{\n      key: 'getQuery',\n      value: function getQuery() {\n        return this.query;\n      }\n    }]);\n\n    return Query;\n  })();\n\n  var Request = (function () {\n    function Request(body) {\n      _classCallCheck(this, Request);\n\n      this.body = body;\n    }\n\n    _createClass(Request, [{\n      key: 'extractQuery',\n      value: function extractQuery() {\n        return this._extractQuery(this.body);\n      }\n    }, {\n      key: '_extractQuery',\n      value: function _extractQuery(body) {\n        var input = this._convertInput(body);\n        if (input.query === undefined || typeof input.query != 'object') {\n          return {};\n        }\n\n        return input.query;\n      }\n    }, {\n      key: '_convertInput',\n      value: function _convertInput(body) {\n        if (typeof body == 'String') {\n          if (body.length == 0) {\n            return {};\n          }\n          try {\n            this.requestObject = JSON.parse(body);\n          } catch (e) {\n            if (e instanceof SyntaxError) {\n              throw new TypeError('Request input must be a valid JSON when it\\'s a string');\n            } else {\n              throw e;\n            }\n          }\n        } else if (typeof body == 'object') {\n          return body;\n        } else {\n          return {};\n        }\n      }\n    }]);\n\n    return Request;\n  })();\n\n  var response__widgetsToArray = function response__widgetsToArray(widgets) {\n    var result = [];\n    Object.keys(widgets).forEach(function (key) {\n      result.push({\n        id: key,\n        data: widgets[key]\n      });\n    });\n\n    return result;\n  };\n\n  var Response = (function () {\n    function Response() {\n      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      _classCallCheck(this, Response);\n\n      this.widgets = {};\n      this.request = new Request(options.requestBody);\n      this.query = new Query({ 'default': options.queryDefault, request: this.request });\n    }\n\n    _createClass(Response, [{\n      key: 'getQuery',\n      value: function getQuery() {\n        return this.query.getQuery();\n      }\n    }, {\n      key: 'widget',\n      value: function widget(id, data) {\n        this.widgets[id] = data;\n      }\n    }, {\n      key: 'toJSON',\n      value: function toJSON() {\n        return {\n          timestamp: Date.now(),\n          query: this.query.getQuery(),\n          item: response__widgetsToArray(this.widgets)\n        };\n      }\n    }, {\n      key: 'toString',\n      value: function toString() {\n        return JSON.stringify(this.toJSON());\n      }\n    }]);\n\n    return Response;\n  })();\n\n  var TB = {\n    response: Response\n  };\n\n  var tadaboard = TB;\n\n  return tadaboard;\n});\n//# sourceMappingURL=tadaboard.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash')) :\n  typeof define === 'function' && define.amd ? define(['lodash'], factory) :\n  global.TB = factory(global._)\n}(this, function (_) { 'use strict';\n\n  class Query {\n    constructor(options = {}) {\n      this.default = options.default || {};\n      this.request = options.request || {};\n      this.query = _.merge({}, this.default, this.request.extractQuery());\n    }\n\n    getQuery() {\n      return this.query;\n    }\n  }\n\n  class Request {\n    constructor(body) {\n      this.body = body;\n    }\n\n    extractQuery() {\n      return this._extractQuery(this.body);\n    }\n\n    _extractQuery(body) {\n      let input = this._convertInput(body);\n      if (input.query === undefined || typeof input.query != 'object') {\n        return {};\n      }\n\n      return input.query;\n    }\n\n    _convertInput(body) {\n      if (typeof body == 'String') {\n        if (body.length == 0) {\n          return {};\n        }\n        try {\n          this.requestObject = JSON.parse(body);\n        } catch (e) {\n          if (e instanceof SyntaxError) {\n            throw new TypeError('Request input must be a valid JSON when it\\'s a string');\n          } else {\n            throw e;\n          }\n        }\n      } else if (typeof body == 'object') {\n        return body;\n      } else {\n        return {};\n      }\n    }\n  }\n\n  let response__widgetsToArray = (widgets) => {\n    let result = [];\n    Object.keys(widgets).forEach(function(key) {\n      result.push({\n        id: key,\n        data: widgets[key]\n      });\n    });\n\n    return result;\n  };\n\n  class Response {\n    constructor(options = {}) {\n      this.widgets = {};\n      this.request = new Request(options.requestBody);\n      this.query = new Query({default: options.queryDefault, request: this.request});\n    }\n\n    getQuery() {\n      return this.query.getQuery();\n    }\n\n    widget(id, data) {\n      this.widgets[id] = data;\n    }\n\n    toJSON() {\n      return {\n        timestamp: Date.now(),\n        query: this.query.getQuery(),\n        item: response__widgetsToArray(this.widgets)\n      };\n    }\n\n    toString() {\n      return JSON.stringify(this.toJSON());\n    }\n  }\n\n  const TB = {\n    response: Response\n  };\n\n  var tadaboard = TB;\n\n  return tadaboard;\n\n}));\n","import _ from 'lodash';\n\nexport default class Query {\n  constructor(options = {}) {\n    this.default = options.default || {};\n    this.request = options.request || {};\n    this.query = _.merge({}, this.default, this.request.extractQuery());\n  }\n\n  getQuery() {\n    return this.query;\n  }\n}\n","export default class Request {\n  constructor(body) {\n    this.body = body;\n  }\n\n  extractQuery() {\n    return this._extractQuery(this.body);\n  }\n\n  _extractQuery(body) {\n    let input = this._convertInput(body);\n    if (input.query === undefined || typeof input.query != 'object') {\n      return {};\n    }\n\n    return input.query;\n  }\n\n  _convertInput(body) {\n    if (typeof body == 'String') {\n      if (body.length == 0) {\n        return {};\n      }\n      try {\n        this.requestObject = JSON.parse(body);\n      } catch (e) {\n        if (e instanceof SyntaxError) {\n          throw new TypeError('Request input must be a valid JSON when it\\'s a string');\n        } else {\n          throw e;\n        }\n      }\n    } else if (typeof body == 'object') {\n      return body;\n    } else {\n      return {};\n    }\n  }\n}\n","import Query from './query';\nimport Request from './request';\n\nlet widgetsToArray = (widgets) => {\n  let result = [];\n  Object.keys(widgets).forEach(function(key) {\n    result.push({\n      id: key,\n      data: widgets[key]\n    });\n  });\n\n  return result;\n};\n\nexport default class Response {\n  constructor(options = {}) {\n    this.widgets = {};\n    this.request = new Request(options.requestBody);\n    this.query = new Query({default: options.queryDefault, request: this.request});\n  }\n\n  getQuery() {\n    return this.query.getQuery();\n  }\n\n  widget(id, data) {\n    this.widgets[id] = data;\n  }\n\n  toJSON() {\n    return {\n      timestamp: Date.now(),\n      query: this.query.getQuery(),\n      item: widgetsToArray(this.widgets)\n    };\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import Response from './response';\n\nconst TB = {\n  response: Response\n};\n\nexport default TB;\n"],"sourceRoot":"/source/"}