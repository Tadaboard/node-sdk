{"version":3,"sources":["tadaboard.js","src/query.js","src/request.js","src/response.js","src/tadaboard.js"],"names":[],"mappings":"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","file":"tadaboard.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash')) :\n  typeof define === 'function' && define.amd ? define(['lodash'], factory) :\n  global.TB = factory(global._)\n}(this, function (_) { 'use strict';\n\n  class Query {\n    constructor(options = {}) {\n      this.default = options.default || {};\n      this.request = options.request || {};\n      this.query = _.merge({}, this.default, this.request.extractQuery());\n    }\n\n    getQuery() {\n      return this.query;\n    }\n  }\n\n  class Request {\n    constructor(body) {\n      this.body = body;\n    }\n\n    extractQuery() {\n      return this._extractQuery(this.body);\n    }\n\n    _extractQuery(body) {\n      let input = this._convertInput(body);\n      if (input.query === undefined || typeof input.query != 'object') {\n        return {};\n      }\n\n      return input.query;\n    }\n\n    _convertInput(body) {\n      if (typeof body == 'String') {\n        if (body.length == 0) {\n          return {};\n        }\n        try {\n          this.requestObject = JSON.parse(body);\n        } catch (e) {\n          if (e instanceof SyntaxError) {\n            throw new TypeError('Request input must be a valid JSON when it\\'s a string');\n          } else {\n            throw e;\n          }\n        }\n      } else if (typeof body == 'object') {\n        return body;\n      } else {\n        return {};\n      }\n    }\n  }\n\n  let response__widgetsToArray = (widgets) => {\n    let result = [];\n    Object.keys(widgets).forEach(function(key) {\n      result.push({\n        id: key,\n        data: widgets[key]\n      });\n    });\n\n    return result;\n  };\n\n  class Response {\n    constructor(options = {}) {\n      this.widgets = {};\n      this.request = new Request(options.requestBody);\n      this.query = new Query({default: options.queryDefault, request: this.request});\n    }\n\n    getQuery() {\n      return this.query.getQuery();\n    }\n\n    widget(id, data) {\n      this.widgets[id] = data;\n    }\n\n    toJSON() {\n      return {\n        timestamp: Date.now(),\n        query: this.query.getQuery(),\n        item: response__widgetsToArray(this.widgets)\n      };\n    }\n\n    toString() {\n      return JSON.stringify(this.toJSON());\n    }\n  }\n\n  const TB = {\n    response: Response\n  };\n\n  var tadaboard = TB;\n\n  return tadaboard;\n\n}));\n","import _ from 'lodash';\n\nexport default class Query {\n  constructor(options = {}) {\n    this.default = options.default || {};\n    this.request = options.request || {};\n    this.query = _.merge({}, this.default, this.request.extractQuery());\n  }\n\n  getQuery() {\n    return this.query;\n  }\n}\n","export default class Request {\n  constructor(body) {\n    this.body = body;\n  }\n\n  extractQuery() {\n    return this._extractQuery(this.body);\n  }\n\n  _extractQuery(body) {\n    let input = this._convertInput(body);\n    if (input.query === undefined || typeof input.query != 'object') {\n      return {};\n    }\n\n    return input.query;\n  }\n\n  _convertInput(body) {\n    if (typeof body == 'String') {\n      if (body.length == 0) {\n        return {};\n      }\n      try {\n        this.requestObject = JSON.parse(body);\n      } catch (e) {\n        if (e instanceof SyntaxError) {\n          throw new TypeError('Request input must be a valid JSON when it\\'s a string');\n        } else {\n          throw e;\n        }\n      }\n    } else if (typeof body == 'object') {\n      return body;\n    } else {\n      return {};\n    }\n  }\n}\n","import Query from './query';\nimport Request from './request';\n\nlet widgetsToArray = (widgets) => {\n  let result = [];\n  Object.keys(widgets).forEach(function(key) {\n    result.push({\n      id: key,\n      data: widgets[key]\n    });\n  });\n\n  return result;\n};\n\nexport default class Response {\n  constructor(options = {}) {\n    this.widgets = {};\n    this.request = new Request(options.requestBody);\n    this.query = new Query({default: options.queryDefault, request: this.request});\n  }\n\n  getQuery() {\n    return this.query.getQuery();\n  }\n\n  widget(id, data) {\n    this.widgets[id] = data;\n  }\n\n  toJSON() {\n    return {\n      timestamp: Date.now(),\n      query: this.query.getQuery(),\n      item: widgetsToArray(this.widgets)\n    };\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","import Response from './response';\n\nconst TB = {\n  response: Response\n};\n\nexport default TB;\n"],"sourceRoot":"/source/"}